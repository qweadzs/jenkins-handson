def notifySlack(STATUS, COLOR) {
	slackSend (channel: '#my-channel', color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
}

pipeline {
  agent any

  options {
    buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '4'))
    disableConcurrentBuilds()
  }

  tools {
    maven 'maven'
  }
  
  environment {
      NEW_VERSION = "1.3.0"
  }

  stages {
    stage("git-clone") {
      steps {
        script {
          notifySlack("Started", "#00FF00")
        }        
        echo "Git clone from gitlab repository"
        git branch: 'dev', url: 'https://gitlab.com/nexweb/jenkins-handson.git'
	credentialsId: 'github-access-token'
      }
    }

    stage("read properties") {
      steps {
        script {
          def props = readProperties  file:'deployment/pipeline.properties'
                
          // Base Directory
          env['baseDir'] = props['baseDir']
          env['baseDeployDir'] = props['baseDeployDir']

          // Docker Hub Info.
          env['tag'] = props['version']
          env['dockerRegistry'] = props['dockerRegistry']
          env['credentialRegistry']=props['credentialRegistry']
          env['image'] = props['image']
          env['WS'] = "${WORKSPACE}"    
          // Kubernetes
          // Git commit and push
          env['deployment'] = props['deployment']
          env['credentialGit'] = props['credentialGit']
          env['user'] = props['username']
          env['email'] = props['email']
          env['imageShortName'] = props['imageShortName']
          env['gitRepositoryUrl'] = props['gitRepositoryUrl']
          env['commitMessage'] = props['commitMessage']
        }
      }
    }

    stage("build") {
      steps {
        echo "Building the application..."   
        sh "mvn clean package -Dmaven.testSkips=true "
      }
    }

    stage("inspect code") {
      steps {
        echo "inspecting the application..."
      }
    }

    stage("build and push image") {
      steps {
        script {
          def IMAGE_TAG = sh(script: 'echo "dev-$BUILD_NUMBER"', returnStdout: true).trim()
          env['IMAGE_TAG'] = IMAGE_TAG
        }
        
        echo "Building and push the image..."
        withCredentials ([
          usernamePassword(
            credentialsId: 'docker-credentials',
            usernameVariable: 'USER', 
            passwordVariable: 'PASSWORD'
          )
        ]) {
          echo "some credentials info : ${USER}, ${PASSWORD}"

          sh "podman login --tls-verify=false --username ${USER} --password ${PASSWORD} ${dockerRegistry}"
          sh "podman build -t ${image}:${IMAGE_TAG} . -f ./deployment/Dockerfile"
          sh "podman push ${image}:${IMAGE_TAG}"    
        }
      }
    }

  	stage('Clone the manifest from git') {
      steps {
        git url: 'https://gitlab.com/nexweb/deploy-sample-service.git', branch: 'dev'
      }
    }
  

		stage( "update manifest" ) {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: "${credentialGit}",
            usernameVariable: 'GIT_USER',
            passwordVariable: 'GIT_PASSWORD'
          )
        ]) {
          sh("""
            git config --global user.name "${user}"
            git config --global user.email "${email}"

            echo "${IMAGE_TAG}"
            echo 
            echo "${GIT_USER}:${GIT_PASSWORD}"
            sed -i 's/$imageShortName:.*/$imageShortName:$IMAGE_TAG/g' "${deployment}"
            cat "${deployment}" | grep image

            git add "${deployment}"
            git commit -m "${commitMessage}:$IMAGE_TAG"
            git push --set-upstream "https://$GIT_USER:$GIT_PASSWORD@$gitRepositoryUrl" dev
          """)
        }
      }
		}
  }

  post {
    success {
      script {
        notifySlack("${currentBuild.currentResult}", "#00FF00")
      }
    }

    failure {
      script {
        notifySlack("${currentBuild.currentResult}", "#FF0000")
      }
    }
  }  
}
